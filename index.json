{
  "api/Physics.NET.DimensionalAnalysis.CGS.html": {
    "href": "api/Physics.NET.DimensionalAnalysis.CGS.html",
    "title": "Struct CGS | Physics.NET",
    "keywords": "Struct CGS Namespace Physics.NET.DimensionalAnalysis Assembly Physics.NET.dll Represents the Centimeter-Gram-Second (CGS) system of units. [Serializable] public readonly struct CGS : ISystemOfMeasurement<CGS> Implements ISystemOfMeasurement<CGS> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Name public const string Name = \"CGS\" Field Value string"
  },
  "api/Physics.NET.DimensionalAnalysis.DimensionalAnalysisExtensions.html": {
    "href": "api/Physics.NET.DimensionalAnalysis.DimensionalAnalysisExtensions.html",
    "title": "Class DimensionalAnalysisExtensions | Physics.NET",
    "keywords": "Class DimensionalAnalysisExtensions Namespace Physics.NET.DimensionalAnalysis Assembly Physics.NET.dll Dimensional analysis extensions. public static class DimensionalAnalysisExtensions Inheritance object DimensionalAnalysisExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToCGS<T>(in Quantity<T, SI>) Convert a value using SI units to one using CGS units. public static Quantity<T, CGS> ToCGS<T>(this in Quantity<T, SI> quantity) where T : IComplex<T>, IDifferentiableFunctions<T> Parameters quantity Quantity<T, SI> The quantity to convert. Returns Quantity<T, CGS> The quantity in CGS units. Type Parameters T The type that represents the value. ToSI<T>(in Quantity<T, CGS>) Convert a value using CGS units to one using SI units. public static Quantity<T, SI> ToSI<T>(this in Quantity<T, CGS> quantity) where T : IComplex<T>, IDifferentiableFunctions<T> Parameters quantity Quantity<T, CGS> The quantity to convert. Returns Quantity<T, SI> The quantity in SI units. Type Parameters T The type that represents the value."
  },
  "api/Physics.NET.DimensionalAnalysis.Dimensions.html": {
    "href": "api/Physics.NET.DimensionalAnalysis.Dimensions.html",
    "title": "Struct Dimensions | Physics.NET",
    "keywords": "Struct Dimensions Namespace Physics.NET.DimensionalAnalysis Assembly Physics.NET.dll Represents the dimensions of a quantity. [Serializable] public readonly struct Dimensions : IBitwiseOperators<Dimensions, Dimensions, Dimensions>, IDivisionOperation<Dimensions, Dimensions>, IMultiplicationOperation<Dimensions, Dimensions>, IEqualityRelation<Dimensions, bool>, IEquatable<Dimensions>, IFormattable Implements IBitwiseOperators<Dimensions, Dimensions, Dimensions> IDivisionOperation<Dimensions, Dimensions> IMultiplicationOperation<Dimensions, Dimensions> IEqualityRelation<Dimensions, bool> IEquatable<Dimensions> IFormattable Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Dimensions() public Dimensions() Dimensions(Rational<sbyte>, Rational<sbyte>, Rational<sbyte>, Rational<sbyte>, Rational<sbyte>, Rational<sbyte>, Rational<sbyte>, Rational<sbyte>) public Dimensions(Rational<sbyte> time, Rational<sbyte> length, Rational<sbyte> mass, Rational<sbyte> current, Rational<sbyte> temperature, Rational<sbyte> amount, Rational<sbyte> intensity, Rational<sbyte> angle) Parameters time Rational<sbyte> length Rational<sbyte> mass Rational<sbyte> current Rational<sbyte> temperature Rational<sbyte> amount Rational<sbyte> intensity Rational<sbyte> angle Rational<sbyte> Fields AbsorbedDose Represents the dimensions of the derived unit of ionizing radiation dose. public static readonly Dimensions AbsorbedDose Field Value Dimensions Acceleration Represents the dimensions of the quantity of acceleration. public static readonly Dimensions Acceleration Field Value Dimensions Amount Represents the dimensions of the base unit of an amount of substance. public static readonly Dimensions Amount Field Value Dimensions Angle Represents the dimensions of the unit of a plane angle. public static readonly Dimensions Angle Field Value Dimensions Remarks In Physics.NET, this has been added to the SI base units for convenience. However, there are justifications for adding it formally. See On the Dimension of Angles and Their Units by Peter J. Mohr, Eric L. Shirley, William D. Phillips, and Michael Trott. AngularAcceleration Represents the dimensions of the quantity of angular acceleration. public static readonly Dimensions AngularAcceleration Field Value Dimensions AngularVelocity Represents the dimensions of the quantity of angular velocity. public static readonly Dimensions AngularVelocity Field Value Dimensions Area Represents the dimensions of the quantity of area. public static readonly Dimensions Area Field Value Dimensions CatalyticActivity Represents the dimensions of the derived unit of catalytic activity. public static readonly Dimensions CatalyticActivity Field Value Dimensions Current Represents the dimensions of the base unit of electric current. public static readonly Dimensions Current Field Value Dimensions CurrentDensity Represents the dimensions of the quantity of current density. public static readonly Dimensions CurrentDensity Field Value Dimensions Density Represents the dimensions of the quantity of density. public static readonly Dimensions Density Field Value Dimensions Dimensionless Represents no dimensions. public static readonly Dimensions Dimensionless Field Value Dimensions ElectricCharge Represents the dimensions of the derived unit of electric charge. public static readonly Dimensions ElectricCharge Field Value Dimensions ElectricFieldStrength Represents the dimensions of the quantity of electric field strength. public static readonly Dimensions ElectricFieldStrength Field Value Dimensions ElectricalCapacitance Represents the dimensions of the derived unit of electrical capacitance. public static readonly Dimensions ElectricalCapacitance Field Value Dimensions ElectricalConductance Represents the dimensions of the derived unit of electrical conductance. public static readonly Dimensions ElectricalConductance Field Value Dimensions ElectricalInductance Represents the dimensions of the derived unit of electrical inductance. public static readonly Dimensions ElectricalInductance Field Value Dimensions ElectricalPotentialDifference Represents the dimensions of the derived unit of electrical potential difference. public static readonly Dimensions ElectricalPotentialDifference Field Value Dimensions ElectricalResistance Represents the dimensions of the derived unit of electrical resistance. public static readonly Dimensions ElectricalResistance Field Value Dimensions Energy Represents the dimensions of the derived unit of energy. public static readonly Dimensions Energy Field Value Dimensions EnergyDensity Represents the dimensions of the quantity of energy density. public static readonly Dimensions EnergyDensity Field Value Dimensions Entropy Represents the dimensions of the quantity of entropy. public static readonly Dimensions Entropy Field Value Dimensions EquivalentDose Represents the dimensions of the derived unit of equivalent dose. public static readonly Dimensions EquivalentDose Field Value Dimensions Force Represents the dimensions of the derived unit of force. public static readonly Dimensions Force Field Value Dimensions Frequency Represents the dimensions of the derived unit of frequency. public static readonly Dimensions Frequency Field Value Dimensions Illuminance Represents the dimensions of the derived unit of illuminance. public static readonly Dimensions Illuminance Field Value Dimensions Intensity Represents the dimensions of the base unit of luminous intensity. public static readonly Dimensions Intensity Field Value Dimensions Length Represents the dimensions of the base unit of length. public static readonly Dimensions Length Field Value Dimensions LuminousFlux Represents the dimensions of the derived unit of luminous flux. public static readonly Dimensions LuminousFlux Field Value Dimensions MagneticFieldStrength Represents the dimensions of the quantity of magnetic field strength. public static readonly Dimensions MagneticFieldStrength Field Value Dimensions MagneticFlux Represents the dimensions of the derived unit of magnetic flux. public static readonly Dimensions MagneticFlux Field Value Dimensions MagneticInduction Represents the dimensions of the derived unit of magnetic induction. public static readonly Dimensions MagneticInduction Field Value Dimensions Mass Represents the dimensions of the base unit of mass. public static readonly Dimensions Mass Field Value Dimensions MomentOfForce Represents the dimensions of the quantity of moment of force, also known as torque. public static readonly Dimensions MomentOfForce Field Value Dimensions MomentOfInertia Represents the dimensions of the quantity of moment of inertia. public static readonly Dimensions MomentOfInertia Field Value Dimensions Permeability Represents the dimensions of the quantity of permeability. public static readonly Dimensions Permeability Field Value Dimensions Permittivity Represents the dimensions of the quantity of permittivity. public static readonly Dimensions Permittivity Field Value Dimensions Power Represents the dimensions of the derived unit of power. public static readonly Dimensions Power Field Value Dimensions Pressure Represents the dimensions of the derived unit of pressure. public static readonly Dimensions Pressure Field Value Dimensions Radioactivity Represents the dimensions of the derived unit of radioactivity. public static readonly Dimensions Radioactivity Field Value Dimensions SolidAngle Represents the dimensions of the derived unit of a solid angle. public static readonly Dimensions SolidAngle Field Value Dimensions SpecificEnergy Represents the dimensions of the quantity of specific energy. public static readonly Dimensions SpecificEnergy Field Value Dimensions SpecifictHeatCapacity Represents the dimensions of the quantity of specific heat capacity. public static readonly Dimensions SpecifictHeatCapacity Field Value Dimensions SurfaceDensity Represents the dimensions of the quantity of surface density. public static readonly Dimensions SurfaceDensity Field Value Dimensions SurfaceTension Represents the dimensions of the quantity of surface tension. public static readonly Dimensions SurfaceTension Field Value Dimensions Temperature Represents the dimensions of the base unit of thermodynamic temperature. public static readonly Dimensions Temperature Field Value Dimensions ThermalConductivity Represents the dimensions of the quantity of thermal conductivity. public static readonly Dimensions ThermalConductivity Field Value Dimensions Time Represents the dimensions of the base unit of time. public static readonly Dimensions Time Field Value Dimensions Velocity Represents the dimensions of the quantity of velocity. public static readonly Dimensions Velocity Field Value Dimensions Volume Represents the dimensions of the quantity of volume. public static readonly Dimensions Volume Field Value Dimensions WaveNumber Represents the dimensions of the quantity of wavenumber. public static readonly Dimensions WaveNumber Field Value Dimensions Methods Equals(Dimensions) Indicates whether the current object is equal to another object of the same type. public bool Equals(Dimensions value) Parameters value Dimensions Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string?, IFormatProvider?) Formats the value of the current instance using the specified format. public string ToString(string? format, IFormatProvider? provider) Parameters format string The format to use. -or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. provider IFormatProvider Returns string The value of the current instance in the specified format. Operators operator &(Dimensions, Dimensions) Computes the bitwise-and of two values. public static Dimensions operator &(Dimensions left, Dimensions right) Parameters left Dimensions The value to and with right. right Dimensions The value to and with left. Returns Dimensions The bitwise-and of left and right. operator |(Dimensions, Dimensions) Computes the bitwise-or of two values. public static Dimensions operator |(Dimensions left, Dimensions right) Parameters left Dimensions The value to or with right. right Dimensions The value to or with left. Returns Dimensions The bitwise-or of left and right. operator /(Dimensions, Dimensions) Divide the left value by the right value. public static Dimensions operator /(Dimensions left, Dimensions right) Parameters left Dimensions The dividend. right Dimensions The divisor. Returns Dimensions The left value divided by the right value. operator ==(Dimensions, Dimensions) public static bool operator ==(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns bool operator ^(Dimensions, Dimensions) Computes the exclusive-or of two values. public static Dimensions operator ^(Dimensions left, Dimensions right) Parameters left Dimensions The value to xor with right. right Dimensions The value to xor with left. Returns Dimensions The exclusive-or of left and right. operator !=(Dimensions, Dimensions) public static bool operator !=(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns bool operator *(Dimensions, Dimensions) Multiply the left value by the right value. public static Dimensions operator *(Dimensions left, Dimensions right) Parameters left Dimensions The left value. right Dimensions The right value. Returns Dimensions The product of the two values. operator ~(Dimensions) Computes the ones-complement representation of a given value. public static Dimensions operator ~(Dimensions value) Parameters value Dimensions The value for which to compute the ones-complement. Returns Dimensions The ones-complement of value."
  },
  "api/Physics.NET.DimensionalAnalysis.ISystemOfMeasurement-1.html": {
    "href": "api/Physics.NET.DimensionalAnalysis.ISystemOfMeasurement-1.html",
    "title": "Interface ISystemOfMeasurement<T> | Physics.NET",
    "keywords": "Interface ISystemOfMeasurement<T> Namespace Physics.NET.DimensionalAnalysis Assembly Physics.NET.dll Defines support for systems of measurement. public interface ISystemOfMeasurement<T> where T : ISystemOfMeasurement<T> Type Parameters T The type that implements the interface. Properties Name The name of the system of measurement. public static abstract string Name { get; } Property Value string"
  },
  "api/Physics.NET.DimensionalAnalysis.SI.html": {
    "href": "api/Physics.NET.DimensionalAnalysis.SI.html",
    "title": "Struct SI | Physics.NET",
    "keywords": "Struct SI Namespace Physics.NET.DimensionalAnalysis Assembly Physics.NET.dll Represents the International System of Units (SI), as coordinated by the International Bureau of Weights and Measurements. [Serializable] public readonly struct SI : ISystemOfMeasurement<SI> Implements ISystemOfMeasurement<SI> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Name public const string Name = \"SI\" Field Value string"
  },
  "api/Physics.NET.DimensionalAnalysis.html": {
    "href": "api/Physics.NET.DimensionalAnalysis.html",
    "title": "Namespace Physics.NET.DimensionalAnalysis | Physics.NET",
    "keywords": "Namespace Physics.NET.DimensionalAnalysis Classes DimensionalAnalysisExtensions Dimensional analysis extensions. Structs CGS Represents the Centimeter-Gram-Second (CGS) system of units. Dimensions Represents the dimensions of a quantity. SI Represents the International System of Units (SI), as coordinated by the International Bureau of Weights and Measurements. Interfaces ISystemOfMeasurement<T> Defines support for systems of measurement."
  },
  "api/Physics.NET.Quantity-2.html": {
    "href": "api/Physics.NET.Quantity-2.html",
    "title": "Struct Quantity<TNumber, TSystemOfMeasurement> | Physics.NET",
    "keywords": "Struct Quantity<TNumber, TSystemOfMeasurement> Namespace Physics.NET Assembly Physics.NET.dll Represents a physical quantity. [Serializable] public readonly record struct Quantity<TNumber, TSystemOfMeasurement> : IEquatable<Quantity<TNumber, TSystemOfMeasurement>> where TNumber : IComplex<TNumber>, IDifferentiableFunctions<TNumber> where TSystemOfMeasurement : ISystemOfMeasurement<TSystemOfMeasurement> Type Parameters TNumber The type that represents the value. TSystemOfMeasurement The system of measurement to use. Implements IEquatable<Quantity<TNumber, TSystemOfMeasurement>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Quantity() public Quantity() Quantity(TNumber) public Quantity(TNumber value) Parameters value TNumber Quantity(TNumber, Dimensions) public Quantity(TNumber value, Dimensions dimensions) Parameters value TNumber dimensions Dimensions Properties Dimensions The dimensions of the quantity. public Dimensions Dimensions { get; } Property Value Dimensions Units The name of the system of measurement. public string Units { get; } Property Value string Value The value of the quantity. public TNumber Value { get; } Property Value TNumber Methods VerifyDimensions(in Dimensions) Check that the dimensions of the quantity are valid. [Conditional(\"DIMENSIONS\")] public void VerifyDimensions(in Dimensions dimensions) Parameters dimensions Dimensions The dimensions to check against. Exceptions DimensionalAnalysisException Thrown when the quantity's dimensions do not match the specified dimensions. Operators operator +(Quantity<TNumber, TSystemOfMeasurement>, Quantity<TNumber, TSystemOfMeasurement>) public static Quantity<TNumber, TSystemOfMeasurement> operator +(Quantity<TNumber, TSystemOfMeasurement> z, Quantity<TNumber, TSystemOfMeasurement> w) Parameters z Quantity<TNumber, TSystemOfMeasurement> w Quantity<TNumber, TSystemOfMeasurement> Returns Quantity<TNumber, TSystemOfMeasurement> operator /(Quantity<TNumber, TSystemOfMeasurement>, Quantity<TNumber, TSystemOfMeasurement>) public static Quantity<TNumber, TSystemOfMeasurement> operator /(Quantity<TNumber, TSystemOfMeasurement> z, Quantity<TNumber, TSystemOfMeasurement> w) Parameters z Quantity<TNumber, TSystemOfMeasurement> w Quantity<TNumber, TSystemOfMeasurement> Returns Quantity<TNumber, TSystemOfMeasurement> operator *(Quantity<TNumber, TSystemOfMeasurement>, Quantity<TNumber, TSystemOfMeasurement>) public static Quantity<TNumber, TSystemOfMeasurement> operator *(Quantity<TNumber, TSystemOfMeasurement> z, Quantity<TNumber, TSystemOfMeasurement> w) Parameters z Quantity<TNumber, TSystemOfMeasurement> w Quantity<TNumber, TSystemOfMeasurement> Returns Quantity<TNumber, TSystemOfMeasurement> operator -(Quantity<TNumber, TSystemOfMeasurement>, Quantity<TNumber, TSystemOfMeasurement>) public static Quantity<TNumber, TSystemOfMeasurement> operator -(Quantity<TNumber, TSystemOfMeasurement> z, Quantity<TNumber, TSystemOfMeasurement> w) Parameters z Quantity<TNumber, TSystemOfMeasurement> w Quantity<TNumber, TSystemOfMeasurement> Returns Quantity<TNumber, TSystemOfMeasurement> operator -(Quantity<TNumber, TSystemOfMeasurement>) public static Quantity<TNumber, TSystemOfMeasurement> operator -(Quantity<TNumber, TSystemOfMeasurement> z) Parameters z Quantity<TNumber, TSystemOfMeasurement> Returns Quantity<TNumber, TSystemOfMeasurement> operator +(Quantity<TNumber, TSystemOfMeasurement>) public static Quantity<TNumber, TSystemOfMeasurement> operator +(Quantity<TNumber, TSystemOfMeasurement> z) Parameters z Quantity<TNumber, TSystemOfMeasurement> Returns Quantity<TNumber, TSystemOfMeasurement>"
  },
  "api/Physics.NET.html": {
    "href": "api/Physics.NET.html",
    "title": "Namespace Physics.NET | Physics.NET",
    "keywords": "Namespace Physics.NET Structs Quantity<TNumber, TSystemOfMeasurement> Represents a physical quantity."
  },
  "index.html": {
    "href": "index.html",
    "title": "Physics.NET | Physics.NET",
    "keywords": "document.addEventListener(\"DOMContentLoaded\", function () { const interactiveCard = document.getElementById(\"interactive-card\"); const overlay = document.getElementById(\"overlay\"); const circleOne = document.getElementById(\"circle-one\"); const circleOneRadius = circleOne.offsetWidth / 2; const circleTwo = document.getElementById(\"circle-two\"); const circleTwoRadius = circleTwo.offsetWidth / 2; const circleThree = document.getElementById(\"circle-three\"); const circleThreeRadius = circleThree.offsetWidth / 2; interactiveCard.addEventListener(\"mousemove\", function (event) { var boundingRectangle = interactiveCard.getBoundingClientRect(); var centerX = interactiveCard.clientWidth / 2; var centerY = interactiveCard.clientHeight / 2; var x = event.clientX - boundingRectangle.left - centerX; var y = event.clientY - boundingRectangle.top - centerY; var magnitude = Math.hypot(x, y); var maxMagnitude = Math.hypot(centerX, centerY); overlay.style.backgroundColor = `rgba(255, 255, 255, ${0.1 * Math.cos(magnitude / maxMagnitude * Math.PI / 2)})`; circleOne.style.left = `${x / 2 - circleOneRadius + centerX}px`; circleOne.style.top = `${y / 2 - circleOneRadius + centerY}px`; circleTwo.style.left = `${-x - circleTwoRadius + centerX}px`; circleTwo.style.top = `${-y - circleTwoRadius + centerY}px`; circleThree.style.left = `${-4 * x - circleThreeRadius + centerX}px`; circleThree.style.top = `${-4 * y - circleThreeRadius + centerY}px`; }); }); Physics.NET Physics.NET is a C# class library that provides tools for solving mathematical problems. About Physics.NET provides custom types for objects related to physics such as four-vectors and common metric tensors in encountered in General Relativity."
  }
}